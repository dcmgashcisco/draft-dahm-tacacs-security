<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2234.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC4234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4234.xml">
<!ENTITY nbsp    "&#160;">
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc strict="yes" ?>
<?rfc comments="no" ?>
<?rfc inline="no" ?>
<?rfc editing="no" ?>
<?rfc toc="yes" ?>
<?rfc tocompact="yes" ?>
<?rfc tocdepth="3" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="std"
    ipr="trust200902"
    docName="@DRAFTNAME@"
    submissionType="IETF">

    <front>
        <title abbrev="TACACS+ TLS">
            TACACS+ Security, TLS, and SSH Public Keys
        </title>

        <author fullname="Thorsten Dahm" initials="T." surname="Dahm">
            <address>
                <postal>
                    <street></street>
                    <code></code>
                    <city></city>
                    <country></country>
                </postal>
                <email>thorsten.dahm@gmail.com</email>
            </address>
        </author>

        <author fullname="Douglas Gash" initials="D." surname="Gash">
            <organization>Cisco Systems, Inc.</organization>
            <address>
                <postal>
                    <street></street>
                    <code></code>
                    <city></city>
                    <country></country>
                </postal>
                <email>dcmgash@cisco.com</email>
            </address>
        </author>

        <author fullname="Andrej Ota" initials="A." surname="Ota">
            <address>
                <postal>
                    <street></street>
                    <code></code>
                    <city></city>
                    <country></country>
                </postal>
                <email>andrej@ota.si</email>
            </address>
        </author>

        <date />
        <area>Operations and Management Area (ops)</area>
        <workgroup>Operations and Management Area Working Group</workgroup>

        <keyword>TACACS+</keyword>

        <abstract>
            <t>
		The <xref target="RFC8907">TACACS+ Protocol</xref> provides device administration for routers, network access servers and other networked computing devices via one or more centralized servers.
                This document, a companion to the <xref target="RFC8907">TACACS+ protocol</xref>, adds new packet formats to improve security and function, adds Transport Layer Security (<xref target="RFC8446">TLS</xref>) support, adds support to carry <xref target="RFC4716">SSH</xref> public keys, and deprecates former inferior security mechanisms.
            </t>
        </abstract>
        <note title="Requirements Language">
            <t>
                The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as shown here.
            </t>
        </note>
    </front>
    <middle>
        <section title="Introduction">
            <t>
		The <xref target="RFC8907">TACACS+ Protocol</xref> provides device administration for routers, network access servers and other networked computing devices via one or more centralized servers.
		The protocol carries authentication, authorization and accounting information for TACACS+ clients.
		While this information is highly sensitive, TACACS+ lacks modern and/or effective confidentiality, integrity, and authentication of the connection and network traffic between the server and client.
            </t>
            <t>
		The existing confidentiality, integrity, and authentication mechanisms of TACACS+ are extremely weak.
		The Security Considerations section of the <xref target="RFC8907">TACACS+ Protocol</xref> adequately describes this.
            </t>
            <t>
		To address these flaws, this document updates the <xref target="RFC8907">TACACS+ Protocol</xref> to use <xref target="RFC8446">TLS</xref> authentication and encryption, and deprecates the use of its former mechanisms.
            </t>
            <t>
		To support SSH authentication using public keys, highly desired by the operator community, this document introduces a method to support sending public keys to a TACACS+ client, allowing centralized management.
            </t>
            <t>
		To accomplish these goals and improve security and functionality when a network proxy is involved in a TACACS+ connection, new and uniform packet formats are introduced.
            </t>
        </section>

        <section title="Technical Definitions">
            <t>
		The Technical Definitions section of the <xref target="RFC8907">TACACS+ Protocol</xref> is fully applicable here and will not be repeated, though may be augmented.
	 	The following terms are also used in this document.
            </t>
            <section title="Legacy Connection">
            <t>
		This is another term for a Connection as defined in <xref target="RFC8907">TACACS+ Protocol</xref>.
		It is a Connection without TLS and possibly using legacy TACACS+ authentication and obfuscation.
            </t>
            </section>
            <section title="Peer">
            <t>
		This refers to a TACACS+ Server or Client.
            </t>
            </section>
            <section title="Session">
            <t>
		Defined in <xref target="RFC8907">TACACS+ Protocol</xref> as a single authentication sequence, a single authorization exchange, or a single accounting exchange.
            </t>
            </section>
            <section title="TLS Connection">
            <t>
		A TLS Connection is a TCP/IP connection with TLS authentication and encruption used by TACACS+ for transport, similar to a Connection as defined in <xref target="RFC8907">TACACS+ Protocol</xref>.
		The TCP/IP port [TBD] is allocated by IANA for this TLS connection.
            </t>
            </section>
        </section>

        <section title="TLS for TACACS+">
            <t>
		TACACS+ connections are over TCP/IP, initiated by the Client to the Server.
		The well-known TCP/IP port 49 on the Server is used for unencrypted and encrypted connections as defined in the <xref target="RFC8907">TACACS+ Protocol</xref>.
		A connection may be used for only a single Session or the multiplexing of multiple Sessions.
            </t>
            <t>
		It is mandatory to maintain the confidentiality, integrity, and authentication of these connections, as <xref target="RFC3365">RFC3365</xref> dictates the need for end-to-end security.
		The current IETF technology best suited for TACACS+ is TLS, which can provide both authentication and transport encryption.
            </t>
            <section title="Well-Known TCP/IP Port" anchor="wellknown">
	    <t>
		All data exchanged by TACACS+ Peers MUST be encrypted, including the authentication of the Peers.
		Therefore, encryption MUST be initiated immediately upon the establishment of the TCP/IP connection.
		For this reason, it is desirable to not use a "STARTTLS" command process which is a feature some protocols, that once existed without TLS, use to maintain backward compatibility.
		Instead, following <xref target="RFC7605">RFC7605</xref>, a different well-known system TCP/IP port is assigned port [TBD].
	    </t>
	    <t>
		A new port is considered appropriate and superior to "STARTTLS" because it allows:
		<list style="symbols">
		<t>easily blocking the unencrypted or inferiorly encrypted connections by the TCP/IP port number,</t>
		<t>passive Intrusion Detection Systems (IDS) watching the unencrypted version to be unaffected by the introduction of TLS,</t>
		<t>avoidance of Man in the Middle (MitM) attacks that can affectSTARTTLS,</t>
		<t>and helps prevention of the accidental exposure of sensitive information due to misconfiguration.</t>
		</list>
	    </t>
	    <t>
		However, co-existence of inferior authentication and encryption, whether TACACS+ legacy or deprecated parts that compose TLS, also presents opportunity for down-grade attacks.
		The simplest way to address the exposure from TACACS+ legacy methods is to refuse legacy TACACS+ connections at the server entirely, perhaps using separate servers for legacy and TLS.
		Another approach is configuration that requires TLS; clients SHOULD allow configuration of TACACS+ servers, both globally and per-server, to require TLS and likewise servers SHOULD allow configuration to require TLS of clients known to be have TLS support.
		Furthermore, Peers SHOULD be configurable to limit offered or recognized TLS versions and algorithms to those recommended by standards bodies and implementers.
XXX another form of downgrade attack is to filter/block the TLS port.  make sure this is covered in the text.
	    </t>
	    <t>
		Servers and clients could also have a cache mechanism of clients and servers, respectively, that have engaged in TACACS+ TLS connections and demand TLS from that point forward.
		However, this has potential to be a Denial of Service (DoS) vector.
	    </t>
            </section>
	    <section title="TLS Protocol Version" anchor="TLSProtoVers">
            <t>
XXX rfc8773 is required to have server/client certificates with PSK
		TACACS+ implementations supporting TLS MUST implement at least <xref target="RFC8446">TLS version 1.3</xref> until it is deprecated.
		However, implementations SHOULD also implement newer TLS versions as they emerge and MUST abandon TLS versions as they are deprecated, including TLS 1.3 and prior versions.
            </t>
            <t>
		Clearly deprecation is more difficult for Servers, because support for and deployment of new TLS versions to Clients will occur with great randomness or perhaps not at all due to End of Support (EoS).
		Therefore, it is of great value to, and implementations MAY, support deprecated versions to allow for gradual adoption and software at its End of Life (EoL).
		A Server that supports deprecated versions SHOULD NOT enable this support except by operator configuration.
            </t>
            </section>
	    <section title="Cipher Requirements">
            <t>
XXX The IANA registry now has "Recommended" algorithms.  reference this for ciphers that should be supported.
		As with <xref target="TLSProtoVers">TLS Protocol Versions</xref>, TACACS+ implementations MUST adopt and deprecate new cipher suites as they emerge or fade and MAY support deprecated cipher suites.
		However, cipher suites is a far more complex subject because those chosen directly affect the effectiveness of the confidentiality, integrity, and authentication of TLS, the processing required, and the types of authentication available.
            </t>
            <t>
		TACACS+ Servers supporting TLS MUST utilize the TLS encryption options described in the following sections.

XXX but should be allowed to evolve as TLS does.

            </t>
		<section title="Mandatory Cipher Suites">
		<t>
		<xref target="RFC5246">TLS 1.2</xref> allows specifying application profiles prescribing which cipher suites to implement for interoperability purposes.
		To maintain simplicity of current TACACS+ configuration using pre-shared secrets, the server implementation MUST implement:
		<list style="symbols">
		<t>TLS-DHE-PSK-WITH-AES-128-GCM-SHA256</t>
		<t>TLS_DHE_PSK_WITH_AES_128_CBC_SHA</t>
		<t>TLS_DHE_PSK_WITH_AES_256_CBC_SHA</t>
		</list>
		</t>
		<t>
		A Client MUST implement at least one of the cipher suites which are implemented on the Server, and MAY implement all of them.
		</t>
		<t>
		Both Clients and Servers MAY implement other cipher suites, but their interoperability is not guaranteed and their implementation is outside of scope of this document.
		XXX again; should allow a way to evolve.  how???
XXX russ housley says:
	Section 3.3.1: Do you want to provide any guidance for TLS 1.3?  I would say something like:

        if TLS 1.2 is used, then one of the following ciphersuites MUST be used
	...

        if TLS 1.3 is used, then one of the following ciphersuites MUST be used
	...
        
	This is not ideal for the evolution part, but you might say:

        if a version beyond TLS 1.3 is used, then one of the ciphersuites that i
s marked as "Recommended" MUST be used ...
XXX
		</t>
		</section>
            </section>

	    <section title="Authentication">
            <t>
XXX
TLS authentication can occur via asymmetric cryptographic or
 Edwards-Curve Digital Signature Algorithm,
or various forms of symmetric pre-shared-key (PSK).
we only consider out of band PSK.  KDF hash alg needs to be specified?  PSK can only be assoc with one HKDF in tls1.3
RPKs - https://tools.ietf.org/html/rfc7250

            </t>
		<section title="PSK Identity Requirements">
		<t>

See rfc 8446 s2.2 regarding PSK  secret choice

Because determining a correct PSK value on the server side is a computationally intensive operation requiring multiple round trips, a mechanism for hitless key change must be defined.
During TLS handshake, a client MUST use PSK identity as defined in <xref target="RFC4279"/> to signal to the server which PSK value to use.
If server does not recognize PSK identity it MUST respond with decrypt_error alert and MUST NOT respond with unknown_psk_identity.
</t>
<t>
Process to change pre-shared keys on server and client is then:
<list style="format %d">
<t>Add new key with new PSK identity on the server.</t>
<t>Add new key with new PSK identity on the client.</t>
<t>Remove old key with old PSK identity from the client.</t>
<t>Remove old key with old PSK identity from the server.</t>
</list>
XXX reference "key life" in rfc8645 ???
</t>
<t>
Note: PSK identity is transmitted in clear text and must not contain information which could aid an attacker who can eavesdrop on the connection.
		</t>
		</section>
		<section title="TLS Certificate Identity Requirements">
		<t>
XXX
		</t>
		</section>
            </section>
        </section>

        <section title="Deprecation of TACACS+ PSK and Encryption">
            <t>
		The <xref target="RFC8907">TACACS+ Protocol</xref> specified a form of encryption and Peer authentication using a pre-shared key that is wholly inadequate by modern standards and is diminutively referred to as data obfuscation in the <xref target="RFC8907">TACACS+ Protocol</xref>.
		The introduction of TLS PSK and certificate Peer authentication and TLS encryption to TACACS+ obsolesces these former mechanisms and so are hereby deprecated.
		Along with them, the TAC_PLUS_UNENCRYPTED_FLAG flag in the TACACS+ header, the least significant bit (LSB) of the flags field, is also deprecated.
            </t>
            <t>
		Peers compliant with this document should set the TAC_PLUS_UNENCRYPTED_FLAG flag in the Packet header of Packets on TLS Connections, indicating that the data obfuscation is not used.
		A Peer that receives a Packet without the flag set on a TLS Connection, should immediately log the error and terminate the TCP/IP connection.
            </t>
            <t>
		A Client that is compliant with this document MUST NOT utilize these deprecated authentication or encryption methods on TLS Connections.
            </t>
            <t>
		A TACACS+ implementation SHOULD, and is encouraged to, offer a configuration mechanism to disable non-TLS connections entirely.
            </t>
            <t>
		A future document SHOULD be written to deprecate the well-known TCP/IP port 49, allocated by the <xref target="RFC8907">TACACS+ Protocol</xref>.
            </t>
        </section>

       <section title="TACACS+ Extended Packet Type">
           <t>
XXX
1 TACACS+ Header Type

minor_version

This is the minor TACACS+ version number.
   TAC_PLUS_MINOR_VER_TWO := 0x2


type
   This is the packet type. Legal values are:

   TAC_PLUS_AUTHEN := 0x01 (Authentication)

   TAC_PLUS_AUTHOR := 0x02 (Authorization)

   TAC_PLUS_ACCT   := 0x03 (Accounting)

   TAC_PLUS_EXT    := 0x04 (Extended)

2 TACACS+ Extended Packet Type

   The purpose of this new packet type is to allow:

   1) Larger Data Values
   2) Authentication Packets to include arbitrary arguments

   It is possible to encode the previous 3 packet types using the Pre Defined Ar
gument names.

   The pattern is intended to follow the style of the original TACACS+ packets,
however there are a few minor differences from the legacy arguments:

   1) The argument value size specified by 32 bit
   2) The name and value are no longer in the same field with the separator. Ins
tead both the name and the argument have lengths in bytes,
   and the argument type is indicated by the last char in the name.


   +----------------+----------------+----------------+----------------+
   | arg_count ...
   +----------------+----------------+----------------+----------------+
   | arg_1_name_len |
   +----------------+
   | arg_1_value_len ...
   +----------------+----------------+----------------+----------------+
   | arg_2_name_len |
   +----------------+
   | arg_2_value_len ...                                               |
   +----------------+----------------+----------------+----------------+
   | ...                                                               |
   +----------------+----------------+----------------+----------------+
   | arg_N_name_len |
   +----------------+
   | arg_N_value_len                                                   |
   +----------------+----------------+----------------+----------------+
   | arg_1_name ...
   +----------------+----------------+----------------+----------------+
   | arg_1_value ...
   +----------------+----------------+----------------+----------------+
   | arg_2_name ...
   +----------------+----------------+----------------+----------------+
   | arg_2_value ...
   +----------------+----------------+----------------+----------------+
   | ...
   +----------------+----------------+----------------+----------------+
   | arg_N_name ...
   +----------------+----------------+----------------+----------------+
   | arg_N_value ...
   +----------------+----------------+----------------+----------------+

arg_count

   The number of arguments in the packet

arg_1_name_len ... arg_N_name_len

   The size of the Name part of each argument, including the final Mandatory/Opt
ioanl Char. The maximum size is 2^8 -1 bytes.

arg_1_value_len ... arg_N_value_len

   The size of the Value part of each argument, including the final Mandatory/Op
tioanl Char. The maximum size is 2^32 -1 bytes.

arg_1_name ... arg_N_name

   The name part of each argument, MUST include the final Mandatory/Optional Cha
r (* or =) at the end. The name is encoded using same
specifications as the argument names in previous TACACS+ authorization and accou
nting packets,

arg_1_name ... arg_N_name

   The value part of each argument, including the final Mandatory/Optional Char.



Pre Defined Argument Names

   The predefined names are intended to cover the full set of hardwired fields i
n the regular packet types 1-3. The purpose of reflecting them
   here is to ensure that the older packet types can be transported using the ne
w packet type with no ambiguity to the naming (because these fields
   were previously fixed, they did not require names). The convention follows th
e pattern for cisco AV-PAIRS in RADIUS: all lower case with dash as
   whitespace.

   Note that one new item is added: origin-client. This is added to allow the se
rver to identify the first NAS that was hit to properly support the proxy case.

   type=
   authentication-action=
   authentication-type=
   authentication-service=
   authentication-method*
   privilege-level*
   user=
   port*
   remote-address*
   origin-client*
   data=
   server-message*
   user-message*
   status=
   flags+
   
Extension Arguments (Group 1: Legacy)
   
   Previously in Authorization and Accounting packets there were a set of define
d arguments. These will also be encoded, where needed, as arguments here.

Extension Arguments (Group 2: New)

   In addition to the Predefined arguments and the Legacy arguments, all the New
 arguments for novel use cases will be encoded as arguments here.
           </t>
       </section>

       <section title="Security Considerations">
           <t>
		This document improves the confidentiality, integrity, and authentication of the connection and network traffic between the TACACS+ Peers by adding TLS support.
		This does not in itself protect the server nor clients; the operator and equipment vendors have a role.
		That role is to diligently follow current best practices for maintaining the integrity of network devices and selection of TLS key and encryption algorithms.
            </t>
	    <t>
		It is not and never will be reasonable to expect RFCs be updated in perpetuity as each new TLS version and/or algorithm emerges nor at a rate to keep pace.
		It would be highly desirable for the TLS working group to publish a single document that evolves with TLS and its algorithms that RFCs such as this one could reference without the need to update those RFCs, thus allowing them to evolve by inheritance.
		As no such document exists, implementers and operators SHOULD make informed use of RFCs to determine which TLS versions and algorithms should be supported, deprecated, or abandoned, in the absence of updates to this RFC.
            </t>
            <t>
		TLS encryption SHOULD be used in deployments when both the clients and servers support it.
		Servers that support TLS encryption MAY be configured to allow Legacy Connections when TLS encryption is not supported by the client, but this is NOT RECOMMENDED because of the threat of downgrade attacks, as described in <xref target="wellknown"/>.
		Legacy Connections would be better served by separate Servers from the TLS Servers.
	    </t>
	    <t>
		It is NOT RECOMMENDED to deploy TACACS+ without TLS authentication and encryption, except for test and debug environments.
	    </t>
        </section>

        <section title="IANA Considerations">
            <t>
		The authors request that, when this draft is accepted by the working group, the OPSAWG Chairs submit a request to IANA for an early allocation, per <xref target="RFC4020">RFC4020</xref> and <xref target="RFC6335">RFC6335</xref>, of a new well-known system TCP/IP port number for "tacacss", described as "TACACS+ over TLS".
		The name "tacacss" follows the common practice of appending an "s" to the name given to the non-TLS well-known port.
		This allocation is justified in <xref target="wellknown"/>.
            </t>
            <t>
		RFC EDITOR: this port number should replace "[TBD]" within this document.
            </t>
        </section>

        <section title="Acknowledgments">
            <t>
                The author(s) would like to thank Russ Housley, Steven M. Bellovin, and Stephen Farrell for their support, insightful review, and/or comments.
            </t>
        </section>
    </middle>
    <back>
        <references title="Normative References">
            <?rfc include="reference.RFC.8446.xml"?>
            <?rfc include="reference.RFC.4716.xml"?>
            <?rfc include="reference.RFC.5246.xml"?>
            <?rfc include="reference.RFC.4279.xml"?>
            <?rfc include="reference.RFC.2119.xml"?>
            <?rfc include="reference.RFC.8174.xml"?>
            <?rfc include="reference.RFC.8907.xml"?>
        </references>
        <references title="Informative References">
            <?rfc include="reference.RFC.3365.xml"?>
            <?rfc include="reference.RFC.4020.xml"?>
            <?rfc include="reference.RFC.6335.xml"?>
            <?rfc include="reference.RFC.7605.xml"?>
        </references>
    </back>
</rfc>
