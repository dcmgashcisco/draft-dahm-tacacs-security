Brief meeting + comments from previous week of email:

- TLS 1.3 0-RTT
  Thorsten, Douglas, & heasley think that the value is very limited by
  comparison to HTTP or QUIC-HTTP and by nature of the current tacacs+ protocol
  that valuable information could be held in anything that might be in that
  first packet anyway.

  TLS would also need to provide a way to return to a full handshake if the
  client connects to a different server that does not have the token, which it
  might already do.  Else, tacacs+ servers would need to share this data.

  We should specify that 0-RTT should be disable or recommend against it.

- Thorsten suggests we target TLS 1.3 only.  Heasley agrees.

  There is a draft to deprecate 1.0 and 1.1, which seems to be with the AD
  for some reason, possibly adoption consideration.

  Heasley thought that there was draft to deprecate 1.2, but seems to have
  been thinking of this:
	https://tools.ietf.org/html/draft-ietf-tls-md5-sha1-deprecate-04

- Regarding the client address via a tacacs proxy, Douglas said,

  Assuming that we don't want to change the packet structure, we may consider
  to a buse the remote address field, which will normally these days include
  the IP of the end station, and allow the field to include a separator and
  then the AAA client. The simple <endstationIP>[/<AAA client IP>] could be
  enough. It follows the pattern set in the old modem era where CLI/DNIS
  numbers of sending and receiving modems were encoded using /.

  I think that the pattern before for CLI/DNIS, although undocumented, is
  established so I don't think it is a priority for this RFC.

  But, field overloading is not typically acceptable.  It would be better in
  Heasley's opinion to define a new header version or option to include
  TLV-based field(s), possibly after then length field.

- Regarding interconnecting AAA, Douglas said,

  There are several cases to consider: a AAA client may use a AAA server for
  authen, author, and acct, or any combination. The session state generated by
  the server may originate from authen or author.

  For authentication, the data field is unused in the final reply packets from
  the server, so the key can be added there.

  For authorization, we can simply define a new arg, say “state” (along lines
  of RADIUS). If the state arg is present in the request it is returned in the
  same attribute, if it is not present then server can add one. Same argument
  for acct.  

  Clearly this can be done at “application” level without any real need for
  updating the protocol, so I think it is also not needed for this RFC.

