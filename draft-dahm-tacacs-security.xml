<?xml version='1.0' encoding='utf-8'?>  <!-- -*- indent-with-tabs: 0 -*- -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<rfc docName="xml2rfc-docs-3.9.1"
     category="info"
     ipr="trust200902"
     submissionType='IETF'
     consensus="true"
     updates="RFC8097" 
     xmlns:xi="http://www.w3.org/2001/XInclude" version="3"
     sortRefs="true"
     indexInclude="false"
     tocDepth="3">


   <front>
     <title abbrev="TACACS+ Security">
            TACACS+ Security, TLS, and SSH Public Keys
     </title>
     <author fullname="Thorsten Dahm" initials="T." surname="Dahm">
       <address>
         <postal>
           <street></street>
           <code></code>
           <city></city>
           <country></country>
         </postal>
         <email>thorsten.dahm@gmail.com</email>
       </address>
     </author>
        
     <author fullname="Douglas Gash" initials="D." surname="Gash">
       <organization>Cisco Systems, Inc.</organization>
       <address>
         <postal>
           <street></street>
           <code></code>
           <city></city>
           <country></country>
         </postal>
         <email>dcmgash@cisco.com</email>
       </address>
     </author>
      
     <author fullname="Andrej Ota" initials="A." surname="Ota">
       <address>
         <postal>
           <street></street>
           <code></code>
           <city></city>
           <country></country>
         </postal>
         <email>andrej@ota.si</email>
       </address>
     </author>

     <date />
     <area>Operations and Management Area (ops)</area>
     <workgroup>Operations and Management Area Working Group</workgroup>

     <keyword>TACACS+</keyword>

     <abstract>
     <t>
       The <xref target="RFC8907">TACACS+ Protocol</xref> provides device administration for routers, network access servers and other networked computing devices via one or more centralized servers.
       This document, a companion to the <xref target="RFC8907">TACACS+ protocol</xref>, adds new packet formats to improve security and function, Transport Layer Security (currently defined by <xref target="RFC5246">TLS 1.2</xref> and <xref target="RFC8446">TLS 1.3</xref>) support, and support for <xref target="RFC4716">SSH</xref> public keys and deprecates former inferior security mechanisms.
     </t>
     </abstract>
     <note title="Requirements Language">
       <t>
         The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="BCP14"/> when, and only when, they appear in all capitals, as shown here.
       </t>
     </note>
   </front>

   <middle>
     <section title="Introduction">
       <t>
         The <xref target="RFC8907">TACACS+ Protocol</xref> provides device administration for routers, network access servers and other networked computing devices via one or more centralized servers.
         The protocol provides authentication, authorization and accounting services for TACACS+ clients.
       </t>
       <t>
	 While the content of the protocol is highly sensitive, TACACS+ lacks modern and/or effective confidentiality, integrity, and authentication of the connection and network traffic between the server and client.
	 The existing mechanisms of TACACS+ are extremely weak and the Security Considerations section of the <xref target="RFC8907">TACACS+ Protocol</xref> adequately describes this.
       </t>
       <t>
	 To address these deficiencies, this document updates the <xref target="RFC8907">TACACS+ Protocol</xref> to use <xref target="RFC5246">TLS 1.2</xref> and <xref target="RFC8446">TLS 1.3</xref> authentication and encryption, and deprecates the use of its former mechanisms.
       </t>
       <t>
	 To support SSH authentication using public keys, highly desired by the operator community, this document introduces a method to support sending public keys to a TACACS+ client, allowing centralized management.
       </t>
       <t>
	 To accomplish these goals and improve security and functionality when a network proxy is involved in a TACACS+ connection, new and uniform packet formats are introduced.
       </t>
     </section>

     <section title="Technical Definitions">
       <t>
         The Technical Definitions section of the <xref target="RFC8907">TACACS+ Protocol</xref> is fully applicable here and will not be repeated, though may be augmented.
         The following terms are also used in this document.
       </t>
       <section title="AVP">
         <t>
           An Attribute-Value Pair or AVP is another name a TACACS+ argument as defined in <xref target="RFC8907"/> Sections 6.1 and 8.
         </t>
       </section>
       <section title="Empty Value">
         <t>
           An empty or zero-length value of an AVP as defined in <xref target="RFC8907"/> Sections 8.1.
         </t>
       </section>
       <section title="Unsecure Connection">
         <t>
           This is another term for a Connection as defined in <xref target="RFC8907">TACACS+ Protocol</xref>.
           It is a Connection without TLS and therefore being plaintext or possibly using unsecure TACACS+ authentication and obfuscation.
         </t>
       </section>
       <section title="Peer">
         <t>
           This refers to a TACACS+ Server or Client.
         </t>
       </section>
       <section title="TLS Connection">
         <t>
           A TLS Connection is a TCP/IP connection with TLS authentication and encryption used by TACACS+ for transport, similar to a Connection as defined in <xref target="RFC8907">TACACS+ Protocol</xref>.
         </t>
       </section>
     </section>

     <section title="TLS for TACACS+">
       <t>
         TACACS+ connections are TCP/IP connections initiated by the Client to the Server.
         The well-known TCP/IP port 49 on the Server is used for unencrypted and encrypted connections as defined in the <xref target="RFC8907">TACACS+ Protocol</xref>.
         A connection may be used for only a single Session or the multiplexing of multiple Sessions.
       </t>
       <t>
                It is mandatory to maintain the confidentiality, integrity, and authentication of these connections, as <xref target="RFC3365"/> dictates the need for end-to-end security.
                The current IETF technology best suited for TACACS+ is TLS, which can provide both authentication and transport encryption.
       </t>
       <section title="Well-Known TCP/IP Port">
            <t>
                All data exchanged by TACACS+ Peers MUST be encrypted, including the authentication of the Peers.
                Therefore, encryption MUST be initiated immediately upon the establishment of the TCP/IP connection.
                For this reason, it is desirable not to use a "STARTTLS" command process, a feature that some protocols, which once existed without TLS, use to maintain backward compatibility.
                Instead, following <xref target="RFC7605"/>, a different well-known system TCP/IP port is assigned by IANA, port [TBD], for the TLS connection.
            </t>
       </section>
       <section title="TLS Protocol Version" anchor="TLSProtoVers">
            <t>
XXX rfc8773 is required to have server/client certificates with PSK
                TACACS+ implementations supporting TLS MUST implement at least <xref target="RFC8446">TLS version 1.3</xref> until it is deprecated.
                However, implementations SHOULD also implement newer TLS versions as they emerge and MUST abandon TLS versions as they are deprecated, including TLS 1.3 and prior versions.
            </t>
            <t>
                Clearly deprecation is more difficult for Servers, because support for and deployment of new TLS versions to Clients will occur with great randomness or perhaps not at all due to End of Support (EoS).
                Therefore, it is of great value to, and implementations MAY, support deprecated versions to allow for gradual adoption and software at its End of Life (EoL).
                A Server that supports deprecated versions SHOULD NOT enable this support except by operator configuration.
            </t>
       </section>
       <section title="Cipher Requirements">
            <t>
XXX The IANA registry now has "Recommended" algorithms.  reference this for ciphers that should be supported.
                As with <xref target="TLSProtoVers">TLS Protocol Versions</xref>, TACACS+ implementations MUST adopt and deprecate new cipher suites as they emerge or fade and MAY support deprecated cipher suites.
                However, cipher suites is a far more complex subject because those chosen directly affect the effectiveness of the confidentiality, integrity, and authentication of TLS, the processing required, and the types of authentication available.
            </t>
            <t>
                TACACS+ Servers supporting TLS MUST utilize the TLS encryption options described in the following sections.

XXX but should be allowed to evolve as TLS does.

            </t>
                <section title="Mandatory Cipher Suites">
                <t>
                <xref target="RFC5246">TLS 1.2</xref> allows specifying application profiles prescribing which cipher suites to implement for interoperability purposes.
                To maintain simplicity of current TACACS+ configuration using pre-shared secrets, the server implementation MUST implement:
                </t>
                <ol>
                <li>TLS-DHE-PSK-WITH-AES-128-GCM-SHA256</li>
                <li>TLS_DHE_PSK_WITH_AES_128_CBC_SHA</li>
                <li>TLS_DHE_PSK_WITH_AES_256_CBC_SHA</li>
                </ol>
                <t>
                A Client MUST implement at least one of the cipher suites which are implemented on the Server, and MAY implement all of them.
                </t>
                <t>
                Both Clients and Servers MAY implement other cipher suites, but their interoperability is not guaranteed and their implementation is outside of scope of this document.
                XXX again; should allow a way to evolve.  how???
XXX russ housley says:
        Section 3.3.1: Do you want to provide any guidance for TLS 1.3?  I would say something like:

        if TLS 1.2 is used, then one of the following ciphersuites MUST be used
        ...

        if TLS 1.3 is used, then one of the following ciphersuites MUST be used
        ...

        This is not ideal for the evolution part, but you might say:

        if a version beyond TLS 1.3 is used, then one of the ciphersuites that i
s marked as "Recommended" MUST be used ...
XXX
                </t>
                </section>
       </section>
       <section title="Authentication">
            <t>
XXX
TLS authentication can occur via asymmetric cryptography or
 Edwards-Curve Digital Signature Algorithm,
or various forms of symmetric pre-shared-key (PSK).
we only consider out of band PSK.  KDF hash algorithm needs to be specified?  PSK can only be assoc with one HKDF in tls1.3
RPKs - https://tools.ietf.org/html/rfc7250

            </t>
                <section title="PSK Identity Requirements">
                <t>
         
See rfc 8446 s2.2 regarding PSK  secret choice

Because determining a correct PSK value on the server side is a computationally intensive operation requiring multiple round trips, a mechanism for hitless key change must be defined.
During TLS handshake, a client MUST use PSK identity as defined in <xref target="RFC4279"/> to signal to the server which PSK value to use.
If server does not recognize PSK identity it MUST respond with decrypt_error alert and MUST NOT respond with unknown_psk_identity.
</t>
<t>
Process to change pre-shared keys on server and client is then:
</t>
<ol>
<li>Add new key with new PSK identity on the server.</li>
<li>Add new key with new PSK identity on the client.</li>
<li>Remove old key with old PSK identity from the client.</li>
<li>Remove old key with old PSK identity from the server.</li>
</ol>
<t>
XXX reference "key life" in rfc8645 ???
</t>
<t>
Note: PSK identity is transmitted in clear text and must not contain information which could aid an attacker who can eavesdrop on the connection.
                </t>
                </section>
                <section title="TLS Certificate Identity Requirements">
                <t>
XXX
                </t>
                </section>
       </section>
     </section>

     <section title="Deprecation of TACACS+ PSK and Encryption">
       <t>
         The <xref target="RFC8907">TACACS+ Protocol</xref> specified a form of encryption and Peer authentication using a pre-shared key that is wholly inadequate by modern standards and is diminutively referred to as data obfuscation.
         The introduction of TLS PSK and certificate Peer authentication and TLS encryption to TACACS+ obsolesces these former mechanisms and so are hereby deprecated.
       </t>
       <t>
         Along with them, the TAC_PLUS_UNENCRYPTED_FLAG flag in the TACACS+ header, the least significant bit (LSB) of the flags field, is also deprecated.
         Peers compliant with this document should set the TAC_PLUS_UNENCRYPTED_FLAG flag in the Packet Header of packets on TLS Connections, indicating that the data obfuscation is not used.
         A Peer that receives a Packet without the flag set on a TLS Connection, should immediately log the error and terminate the TCP/IP connection.
       </t>
       <t>
         A Client that is compliant with this document MUST NOT utilize these deprecated authentication or encryption methods on TLS Connections/
       </t>
       <t>
         A TACACS+ Server or Client implementation SHOULD, and is strongly encouraged to, offer a configuration mechanism to disable non-TLS connections entirely.
       </t>
       <t>
         A future document SHOULD be written to deprecate the well-known TCP/IP port 49, allocated by the <xref target="RFC8907">TACACS+ Protocol</xref>.
       </t>
       <t>
         XXX Anything else to deprecate?  We had discussed deprecation of MS-CHAP v1. ????
       </t>
     </section>

     <section title="TACACS+ Extended Authentication Packet Types" anchor="ExtendedAuthenticationPacketType">
       <t>
                Versions 1 and 2 of the TACACS+ Protocol, as defined in <xref target="RFC8907"/>, specify the TACACS+ Authentication Packets for START, REPLY and CONTINUE which support the credential validation use case but does not accommodate any further arguments
which may be used to give context to the request.
       </t>
       <t>
         One use-case where this shortcoming inhibits correct operation is for the TACACS+ proxy.
         Because the originating client is not encoded in the regular Authentication START Packet, TACACS+ Servers generally attempt to determine the client from the TCP connection.
         This is effective only for the first step: proxied TACACS+ servers can no longer securely enforce policy based upon the end client IP-Address.
       </t>
       <t>
         Further, advanced use cases (such as SSH key distribution) would otherwise rely on embedding structured information into the single data fields, obfuscating the content of the protocol.
       </t>
       <t>
         To support these use cases, and allow clients to add environment information to the request, the Extended Authentication Packets brings the Authentication phase of the protocol inline with the Authorization and Accounting Phase by incorporating extensible argument
s.
       </t>
       <t>
         The server should expect Extended Authentication Packet Bodies if the minor version in the Packet Header is: 0x2
       </t>

       <section anchor="ExtendedAuthenticationSTARTPacketBody" title="The Extended Authentication START Packet Body">
         <figure>
           <artwork><![CDATA[
 1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
+----------------+----------------+----------------+----------------+
|    action      |    priv_lvl    |  authen_type   | authen_service |
+----------------+----------------+----------------+----------------+
|    user_len    |    port_len    |  rem_addr_len  |    data_len    |
+----------------+----------------+----------------+----------------+
|    arg_cnt                                                        |
+----------------+----------------+----------------+----------------+
|    arg_1_len                                                      |
+----------------+----------------+----------------+----------------+
|      ...                                                          |
+----------------+----------------+----------------+----------------+
|    arg_N_len                                                      |
+----------------+----------------+----------------+----------------+
|    user ...
+----------------+----------------+----------------+----------------+
|    port ...
+----------------+----------------+----------------+----------------+
|    rem_addr ...
+----------------+----------------+----------------+----------------+
|    data...
+----------------+----------------+----------------+----------------+
|    arg_1 ...
+----------------+----------------+----------------+----------------+
|    arg_2 ...
+----------------+----------------+----------------+----------------+
|    ...
+----------------+----------------+----------------+----------------+
|    arg_N ...
+----------------+----------------+----------------+----------------+
]]></artwork>
         </figure>
         <t>
           The action, priv_level, authen_type, authen_service, user_len, port_len, rem_addr_len, data_len, user, port, rem_addr and data fields are used exactly as defined in the Authentication START Packet Body in <xref target="RFC8907"/>.
         </t>
         <t>The following fields contain the arguments that may be used to extend the authentication process. These are common to the Extended Authentication START, Extended Authentication REPLY, and Extended Authentication CONTINUE packet bodies; these fields represent the sole update from the previous START, REPLY and CONTIMUE packet bodies.</t>
         <t>The new fields are as follows:</t>
         <t>arg_cnt</t>
         <t>This represents the number of arguments in the packet.</t>

         <t>arg_1_len ... arg_N_len, arg_1 ... arg_N</t>

         <t>
           Each argument is encoded in the packet as a single arg field (arg_1 ... arg_N) with a corresponding length field that indicates the length of each argument in bytes.
         </t>
         <t>
           The arguments are argument-value pairs.
           The argument and the value are in a single string and are separated by either a "=" (0X3D) or a "*" (0X2A).
           The equals sign indicates a mandatory argument. The asterisk indicates an optional one.
           For the rules regarding optional and mandatory arguments, refer to <xref target="RFC8907"/>
         </t>
         <t>
           The addition of arguments to the authentication packets is intended to permit the flexibility for TACACS+ phase that has been available previously for authorization and accounting.
           These fields are intended to be used as needed in deployment, they are used in this document in the enhancments for <xref target="SSH">SSH</xref>, and to support the origin client to enhance TACACS+ Proxy:
         </t>

         <t>origin_client</t>
         <t>
           The IP-Address of the originating TACACS+ client.
           This is text encoded in line with the rest of the TACACS+ protocol, and may be IPv4 or IPv6.
           This argument is optional.
           IPv4 addresses are specified as octet numeric values separated by dots ('.').
           IPv6 address text representation is defined in [RFC5952].
         </t>
       </section>

       <section anchor="ExtensionAuthenticationREPLYPacketBody" title="The Extension Authentication REPLY Packet Body">
         <t>
           The TACACS+ server sends only one type of extended authentication packet to the client.
         </t>
         <figure>
           <artwork><![CDATA[
 1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
+----------------+----------------+----------------+----------------+
|     status     |      flags     |        server_msg_len           |
+----------------+----------------+----------------+----------------+
|           data_len              |
+----------------+----------------+----------------+----------------+
|    arg_cnt                                                        |
+----------------+----------------+----------------+----------------+
|    arg_1_len                                                      |
+----------------+----------------+----------------+----------------+
|      ...                                                          |
+----------------+----------------+----------------+----------------+
|    arg_N_len                                                      |
+----------------+----------------+----------------+----------------+
|    data ...
+----------------+----------------+----------------+----------------+
|    server_msg ...
+----------------+----------------+----------------+----------------+
|    arg_1 ...
+----------------+----------------+----------------+----------------+
|    arg_2 ...
+----------------+----------------+----------------+----------------+
|    ...
+----------------+----------------+----------------+----------------+
|    arg_N ...
+----------------+----------------+----------------+----------------+
]]></artwork>
         </figure>
         <t>
           The status, flags, server_msg_len, data_len, server_msg, and data fields are used exactly as defined in the Authentication REPLY Packet Body in <xref target="RFC8907"/>].
         </t>
         <t>
           The new arg_cnt, arg_1 ... arg_N, and arg_1_len .... arg_N_len fields are used as defined in <xref target="ExtendedAuthenticationSTARTPacketBody">The Extended Authentication START Packet Body</xref>.
         </t>
       </section>

       <section anchor="ExtendedAuthenticationCONTINUEPacketBody" title="The Extended Authentication CONTINUE Packet Body">
         <t>
           This packet is sent from the client to the server following the receipt of an Extended REPLY packet.
         </t>
         <figure>
           <artwork><![CDATA[
 1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
+----------------+----------------+----------------+----------------+
|          user_msg len           |            data_len             |
+----------------+----------------+----------------+----------------+
|     flags      |                                                  |
+----------------+----------------+----------------+----------------+
|    arg_cnt                                                        |
+----------------+----------------+----------------+----------------+
|    arg_1_len                                                      |
+----------------+----------------+----------------+----------------+
|      ...                                                          |
+----------------+----------------+----------------+----------------+
|    arg_N_len                                                      |
+----------------+----------------+----------------+----------------+
|  user_msg ...
+----------------+----------------+----------------+----------------+
|    data ...
+----------------+----------------+----------------+----------------+
|    arg_1 ...
+----------------+----------------+----------------+----------------+
|    arg_2 ...
+----------------+----------------+----------------+----------------+
|    ...
+----------------+----------------+----------------+----------------+
|    arg_N ...
+----------------+----------------+----------------+----------------+
]]></artwork>
         </figure>
         <t>
           The user_msg len, data_len, flags, user_msg, and data fields are used exactly as defined in the Authentication REPLY Packet Body in <xref target="RFC8907"/>.
         </t>
         <t>
           The new arg_cnt, arg_1 ... arg_N, and arg_1_len .... arg_N_len fields are used as defined in <xref target="ExtendedAuthenticationSTARTPacketBody">The Extended Authentication START Packet Body</xref>.
         </t>
       </section>
     </section>

     <section anchor="SSH" title="SSH">
       <t>
         Most network equipment now support <xref target="RFC4251">SSH</xref> for Command Line Interface (CLI) and <xref target="RFC6242">Netconf</xref>.
         Operators want to use SSH public keys for authentication.
         Some devices support public keys in native configuration, but there is desire to centrally manage keys and SSH subsystem authorization.
       </t>

       <section title="New TACACS+ Code Points and AVPs">
         <t>The following new TACACS+ code points and AVPs are needed to support SSH in the subsequent sections.</t>
         <t>New code points are added to <xref target="RFC8907"/> Section 5.1 - 5.3 as follows:</t>
	 <dl newline="true">
	   <dt>TAC_PLUS_AUTHEN_TYPE_SSHPK := 0x07</dt>
           <dd>This authen_type value is used for Authentication START Packet.</dd>

	   <dt>TAC_PLUS_AUTHEN_METH_SSHPK := 0x21</dt>
           <dd>This authen_method value is used for Authorization and Accounting.</dd>

	   <dt>TAC_PLUS_AUTHEN_STATUS_GETSSHPKTYPE := 0x08</dt>
           <dd>This Authentication REPLY Packet status XXX .</dd>
         </dl>
       </section>

       <section title="SSH Public Key Support">
         <t>
	   To support central management of SSH public keys via TACACS+, this document extends the Authentication sequence of <xref target="RFC8907"/> Section 5.4 using <xref target="ExtendedAuthenticationPacketType">Extended Authenication Packet</xref> sequences to deliver SSH public keys to devices for local verification.
	 </t>
         <t>
           The XXX SSH authentication Flow commences and is encoded as follows:
XXX describe the authenication sequences in Extended Authentication Packet format.
</t>
<ol>
<li>
1) The START packet may include a username and if so may include comma-
seperated AVPs encoded in the data field of ssh_pubkey_type=keytypename
(reference IANA pubkey alg names
https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-paramet
ers-19).

ssh_pubkey_type=null indicates that all key types are wanted; ie: all
keys held by the server.

XXX Is this use of the data field appropriate?  Should this AVP just be
    disallowed in START or a new field created?  Allowing it or creating
    anew both seem messy, but 8907 seems to imply it is the discretion of
    the AUTHEN_TYPE.

XXX Should the client indicate the ssh subsystem in another AVP?  The server
    could deny access to cli, but allow netconf, for example.

XXX Should there be an ssh_pubkey_type AVP?  Why not just send all keys types,
    which could mean much more data is sent?  Or should it allow multiple
    ssh_pubkey_type AVPs at once?
    data=ssh_pubkey_type=keytypename,ssh_pubkey_type=keytypename, ...

XXX Is this use of the "null" type too kinky?
</li>


<li>
2) If the username was not present, the data field is ignored, and the
server replies with status AUTHEN_STATUS_GETUSER.  The client must respond
with the username in an Authentication CONTINUE packet and may include an
ssh_pubkey_type AVP as in START.

XXX should this Authen CONTINUE packet allow the ssh_pubkey_type AVP to
    be included in the data field?

XXX Can AUTHEN_STATUS_GETUSER be altered in this manner?  Or should we add
    an AUTHEN_STATUS_GETSSHUSER?
</li>

<li>
3) Else, if the ssh_pubkey_type AVP was not supplied in the START or CONTINUE
packets, the server replies with the new status code:
      TAC_PLUS_AUTHEN_STATUS_GETSSHPUBKEYTYPE := 0x08
The client must respond with the key type that it wants in a ssh_pubkey_type
AVP encoded in the data field.
</li>

<li>
4) If none of the wanted ssh_pubkey_type(s) are present, the server must reply
with AUTHEN_STATUS_FAIL.  The client must start a new authentication session
to retrieve other ssh_pubkey_type(s) or use another authentication method.
</li>

<li>
5) Else, the server replies with the appropriate null-byte separated
ssh_pubkey_type(s) in "insert-rfc-ssh-pubkey-format" (rfc4716) in the data field
with the new status code:
      TAC_PLUS_AUTHEN_SSHPUBKEY := 0x09
The final null byte must be present and must be included in the data_len.
If the total length of the ssh_pubkey_type(s) to be provide exceeds the
maximum payload length of a T+ message of lessthanorequalto  0xffff, limited by the data_len
field size and other factors, the reply packet must set the new flag:
      TAC_PLUS_REPLY_FLAG_MORE := 0x10          XXX better name?
to indicate that the client should request the balance of data.  Subsequently,
The data should be concatenated together to form the complete list, implying
that a single key may span multiple t+ messages.
</li>

<li>
6) If the REPLY_FLAG_MORE flag is set, the client may reply with the same
CONTINUE packet as before with the new flag set:
      TAC_PLUS_CONTINUE_FLAG_MORE := 0x05       XXX better name?
The server replies with the next chunk.  When tha last chunk is sent,
the REPLY_FLAG_MORE is cleared.
</li>

<li>
7) Once the client has all of the pubkeys, it should perform the ssh pubkey
authentication with its ssh client.  The client must then reply to the
server with the status of that authentication with one of the following new
or existing CONTINUE flags:
      TAC_PLUS_CONTINUE_FLAG_ABORT := 0x01
      TAC_PLUS_CONTINUE_FLAG_PASS := 0x02
      TAC_PLUS_CONTINUE_FLAG_FAIL := 0x04
      TAC_PLUS_CONTINUE_FLAG_ERROR := 0x08

XXX should any data be included in the data field?  Such as the matching
    key or ssh_pubkey_type AVP or ???.
</li>

<li>
8) The client must give the server the final word, by waiting for a REPLY packet
with one of the status:
      TAC_PLUS_AUTHEN_STATUS_PASS := 0x01
      TAC_PLUS_AUTHEN_STATUS_FAIL := 0x02
      TAC_PLUS_AUTHEN_STATUS_ERROR := 0x07
Thus ending the authentication session.
</li>
</ol>
<t>

Such a format might utilize more pubkey status
codes from:
        Public Key subsystem Status Codes
        https://datatracker.ietf.org/doc/html/rfc4819#section-6.6
        https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-26

XXX should the a "ssh subsystem" AVP be added for authorization?
            </t>
         <t>
 the Authentication sequence of <xref target="RFC8907">RFC8907 Section 5.4.2</xref> and the <xref target="ExtendedAuthenticationPacketType">Extended Authenication</xref> sequence to deliver SSH public keys to devices for local verification.
         </t>
       </section>

       <section title="SSH Authorization and Accounting">
         <t>
           To support central management via TACACS+ of SSH and SSH subsystem authorization, this document adds an <xref target="RFC8907">RFC8907 Section 6.1 Authorization REQUEST authen_method</xref> and well-known AVPs to <xref target="RFC8907">RFC8907 Section 8.2 Authorization Arguments</xref>.
         </t>
         <t>New Authorization and Accounting authen_method values:</t>
         <dl newline="true">
           <dt>TAC_PLUS_AUTHEN_METH_SSHPUBKEY := 0x21</dt>
           <dd>This value indicates that the user authenticated by SSH public key.</dd>
         </dl>
         <t>New Authorization and Accounting Arguments:</t>
         <dl newline="true" indent="8">
           <dt>ssh-subsystem (String)</dt>
           <dd>This AVP defines the SSH subsystem for which the authorization is requested and is Mandatory when the authen_method is TAC_PLUS_AUTHEN_METH_SSHPUBKEY.
               Valid values are the Empty Value or a SSH Subsystem Name as defined in the <xref target="SSHPARAM">IANA SSH Connection Protocol Subsystem Names Registry</xref>, which are case-sensitive as specified and otherwise constrained by <xref target="RFC4250"/> Section 4.6.1.
               An invalid name MUST result in an Authorization REPLY packet with status TAC_PLUS_AUTHOR_STATUS_ERROR.
           </dd>
         </dl>
<t>
XXX add netconf_acct or ssh_subsystem_acct accounting "event" type?  or ssh subsystem name with "_acct" postfix?
</t>
       </section>
     </section>

     <section title="Security Considerations">
       <section title="TLS">
         <t>
           This document improves the confidentiality, integrity, and authentication of the connection and network traffic between the TACACS+ Peers by adding TLS support.
           This does not in itself protect the server nor clients; the operator and equipment vendors have a role.
           That role is to diligently follow current best practices for maintaining the integrity of network devices and selection of TLS key and encryption algorithms.
         </t>
         <section title="TLS Options">
           <t>
             It is not and never will be reasonable to expect RFCs be updated in perpetuity as each new TLS version and/or algorithm emerges nor at a rate to keep pace.
             It would be highly desirable for the TLS working group to publish a single document, that evolves with TLS and its algorithms, which RFCs using TLS, such as this one, could reference without the need to update those RFCs, thus allowing them to evolve by inheri
tance.
             As no such document exists, implementers and operators SHOULD make informed use of RFCs to determine which TLS versions and algorithms should be supported, deprecated, or abandoned, in the absence of updates to this RFC.
           </t>
         </section>
         <section title="TLS Use">
           <t>
             TLS encryption SHOULD be used in deployments when both the clients and servers support it.
             Servers that support TLS encryption MAY be configured to allow Unsecure Connections when TLS encryption is not supported by the client, but this is NOT RECOMMENDED because of the threat of downgrade attacks, as described in <xref target="wellknown"/>.
             Unsecure Connections would be better served by separate Servers from the TLS Servers.
           </t>
           <t>
             It is NOT RECOMMENDED to deploy TACACS+ without TLS authentication and encryption, except for test and debug environments.
           </t>
         </section>
       </section>

       <section title="Well-Known TCP/IP Port" anchor="wellknown">
         <t>
           A new port is considered appropriate and superior to a "STARTTLS" command because it allows:
         </t>
         <ul>
           <li>ease of blocking the unencrypted or inferiorly encrypted connections by the TCP/IP port number,</li>
           <li>passive Intrusion Detection Systems (IDSs) monitoring the unencrypted version to be unaffected by the introduction of TLS,</li>
           <li>avoidance of Man in the Middle (MitM) attacks that can interfere with STARTTLS,</li>
           <li>and helps prevent the accidental exposure of sensitive information due to misconfiguration.</li>
         </ul>
         <t>
           However, co-existence of inferior authentication and encryption, whether an Unsecure Connection or deprecated parts that compose TLS, also presents opportunity for down-grade attacks.
           Causing failure of connections to the TLS-enabled service or the negotiation of shared algorithm support are two such down-grade attacks.
           The simplest way to address the exposure from Unsecure Connection methods is to refuse Unsecure Connections at the server entirely, perhaps using separate servers for Unsecure Connections and TLS.
           Another approach is mutual configuration that requires TLS.
           Clients and servers SHOULD support configuration that requires Peers, globally and individually, use TLS.
           Furthermore, Peers SHOULD be configurable to limit offered or recognized TLS versions and algorithms to those recommended by standards bodies and implementers.
         </t>
         <t>
           Servers and clients could also maintain a cache of Peers that have engaged in TACACS+ TLS connections and demand TLS from that point forward.
           However, this has potential to be a Denial of Service (DoS) vector, whereby an attacker causes a sever to believe that a client that does not support TLS has successfully connected with TLS.
         </t>
       </section>
     </section>

     <section title="IANA Considerations">
       <t>
         The authors request that, when this draft is accepted by the working group, the OPSAWG Chairs submit a request to IANA for an early allocation, per <xref target="RFC4020"/> and <xref target="RFC6335"/>, of a new well-known system TCP/IP port number for
 "tacacss", described as "TACACS+ over TLS".
         The name "tacacss" follows the common practice of appending an "s" to the name given to the non-TLS well-known port.
         This allocation is justified in <xref target="wellknown"/>.
       </t>
       <t>
         RFC EDITOR: this port number should replace "[TBD]" within this document.
       </t>
     </section>

     <section title="Acknowledgments">
       <t>
         The author(s) would like to thank Russ Housley, Steven M. Bellovin, Stephen Farrell, Alan DeKok, and Tom Petch for their support, insightful review, and/or comments.
       </t>
     </section>

   </middle>

   <back>
     <references title="Normative References">
       <referencegroup anchor="BCP14" target="https://www.rfc-editor.org/bcp/bcp14.txt">
         <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
         <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
       </referencegroup>
       <?rfc include="reference.RFC.4279.xml"?>
       <?rfc include="reference.RFC.4250.xml"?>
       <?rfc include="reference.RFC.4716.xml"?>
       <?rfc include="reference.RFC.5246.xml"?>
       <?rfc include="reference.RFC.8446.xml"?>
       <?rfc include="reference.RFC.8907.xml"?>
       <reference anchor="SSHPARAM" target="https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml">
         <front>
           <title>SSH Protocol Parameters</title>
           <author fullname="IANA"></author>
         </front>
       </reference>
     </references>
     <references title="Informative References">
       <?rfc include="reference.RFC.3365.xml"?>
       <?rfc include="reference.RFC.4020.xml"?>
       <?rfc include="reference.RFC.4251.xml"?>
       <?rfc include="reference.RFC.6242.xml"?>
       <?rfc include="reference.RFC.6335.xml"?>
       <?rfc include="reference.RFC.7605.xml"?>
     </references>

   </back>
</rfc>
