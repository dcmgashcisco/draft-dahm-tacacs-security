



Operations and Management Area Working Group                     T. Dahm
Internet-Draft                                                          
Updates: RFC8097 (if approved)                                   D. Gash
Intended status: Informational                       Cisco Systems, Inc.
Expires: 29 January 2022                                          A. Ota
                                                            28 July 2021


               TACACS+ Security, TLS, and SSH Public Keys
                           xml2rfc-docs-3.9.1

Abstract

   The TACACS+ Protocol [RFC8907] provides device administration for
   routers, network access servers and other networked computing devices
   via one or more centralized servers.  This document, a companion to
   the TACACS+ protocol [RFC8907], adds new packet formats to improve
   security and function, Transport Layer Security (currently defined by
   TLS 1.2 [RFC5246] and TLS 1.3 [RFC8446]) support, and support for SSH
   [RFC4716] public keys and deprecates former inferior security
   mechanisms.

Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [BCP14] when, and only when, they appear in all capitals, as shown
   here.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 29 January 2022.





Dahm, et al.             Expires 29 January 2022                [Page 1]

Internet-Draft              TACACS+ Security                   July 2021


Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Technical Definitions . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Unsecure Connection . . . . . . . . . . . . . . . . . . .   3
     2.2.  Peer  . . . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.3.  TLS Connection  . . . . . . . . . . . . . . . . . . . . .   4
   3.  TLS for TACACS+ . . . . . . . . . . . . . . . . . . . . . . .   4
     3.1.  Well-Known TCP/IP Port  . . . . . . . . . . . . . . . . .   4
     3.2.  TLS Protocol Version  . . . . . . . . . . . . . . . . . .   4
     3.3.  Cipher Requirements . . . . . . . . . . . . . . . . . . .   5
       3.3.1.  Mandatory Cipher Suites . . . . . . . . . . . . . . .   5
     3.4.  Authentication  . . . . . . . . . . . . . . . . . . . . .   6
       3.4.1.  PSK Identity Requirements . . . . . . . . . . . . . .   6
       3.4.2.  TLS Certificate Identity Requirements . . . . . . . .   6
   4.  Deprecation of TACACS+ PSK and Encryption . . . . . . . . . .   6
   5.  TACACS+ Extended Authentication Packet Types  . . . . . . . .   7
     5.1.  The Extended Authentication START Packet Body . . . . . .   7
     5.2.  The Extension Authentication REPLY Packet Body  . . . . .   9
     5.3.  The Extended Authentication CONTINUE Packet Body  . . . .  10
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .  11
     6.1.  TLS . . . . . . . . . . . . . . . . . . . . . . . . . . .  11
       6.1.1.  TLS Options . . . . . . . . . . . . . . . . . . . . .  12
       6.1.2.  TLS Use . . . . . . . . . . . . . . . . . . . . . . .  12
     6.2.  Well-Known TCP/IP Port  . . . . . . . . . . . . . . . . .  12
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  13
   8.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  13
   9.  Normative References  . . . . . . . . . . . . . . . . . . . .  13
   10. Informative References  . . . . . . . . . . . . . . . . . . .  14
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  14







Dahm, et al.             Expires 29 January 2022                [Page 2]

Internet-Draft              TACACS+ Security                   July 2021


1.  Introduction

   The TACACS+ Protocol [RFC8907] provides device administration for
   routers, network access servers and other networked computing devices
   via one or more centralized servers.  The protocol provides
   authentication, authorization and accounting services for TACACS+
   clients.

   While the content of the protocol is highly sensitive, TACACS+ lacks
   modern and/or effective confidentiality, integrity, and
   authentication of the connection and network traffic between the
   server and client.  The existing mechanisms of TACACS+ are extremely
   weak and the Security Considerations section of the TACACS+ Protocol
   [RFC8907] adequately describes this.

   To address these deficiencies, this document updates the TACACS+
   Protocol [RFC8907] to use TLS 1.2 [RFC5246] and TLS 1.3 [RFC8446]
   authentication and encryption, and deprecates the use of its former
   mechanisms.

   To support SSH authentication using public keys, highly desired by
   the operator community, this document introduces a method to support
   sending public keys to a TACACS+ client, allowing centralized
   management.

   To accomplish these goals and improve security and functionality when
   a network proxy is involved in a TACACS+ connection, new and uniform
   packet formats are introduced.

2.  Technical Definitions

   The Technical Definitions section of the TACACS+ Protocol [RFC8907]
   is fully applicable here and will not be repeated, though may be
   augmented.  The following terms are also used in this document.

2.1.  Unsecure Connection

   This is another term for a Connection as defined in TACACS+ Protocol
   [RFC8907].  It is a Connection without TLS and therefore being
   plaintext or possibly using unsecure TACACS+ authentication and
   obfuscation.

2.2.  Peer

   This refers to a TACACS+ Server or Client.






Dahm, et al.             Expires 29 January 2022                [Page 3]

Internet-Draft              TACACS+ Security                   July 2021


2.3.  TLS Connection

   A TLS Connection is a TCP/IP connection with TLS authentication and
   encryption used by TACACS+ for transport, similar to a Connection as
   defined in TACACS+ Protocol [RFC8907].

3.  TLS for TACACS+

   TACACS+ connections are TCP/IP connections initiated by the Client to
   the Server.  The well-known TCP/IP port 49 on the Server is used for
   unencrypted and encrypted connections as defined in the TACACS+
   Protocol [RFC8907].  A connection may be used for only a single
   Session or the multiplexing of multiple Sessions.

   It is mandatory to maintain the confidentiality, integrity, and
   authentication of these connections, as [RFC3365] dictates the need
   for end-to-end security.  The current IETF technology best suited for
   TACACS+ is TLS, which can provide both authentication and transport
   encryption.

3.1.  Well-Known TCP/IP Port

   All data exchanged by TACACS+ Peers MUST be encrypted, including the
   authentication of the Peers.  Therefore, encryption MUST be initiated
   immediately upon the establishment of the TCP/IP connection.  For
   this reason, it is desirable not to use a "STARTTLS" command process,
   a feature that some protocols, which once existed without TLS, use to
   maintain backward compatibility.  Instead, following [RFC7605], a
   different well-known system TCP/IP port is assigned by IANA, port
   [TBD], for the TLS connection.

3.2.  TLS Protocol Version

   XXX rfc8773 is required to have server/client certificates with PSK
   TACACS+ implementations supporting TLS MUST implement at least TLS
   version 1.3 [RFC8446] until it is deprecated.  However,
   implementations SHOULD also implement newer TLS versions as they
   emerge and MUST abandon TLS versions as they are deprecated,
   including TLS 1.3 and prior versions.

   Clearly deprecation is more difficult for Servers, because support
   for and deployment of new TLS versions to Clients will occur with
   great randomness or perhaps not at all due to End of Support (EoS).
   Therefore, it is of great value to, and implementations MAY, support
   deprecated versions to allow for gradual adoption and software at its
   End of Life (EoL).  A Server that supports deprecated versions SHOULD
   NOT enable this support except by operator configuration.




Dahm, et al.             Expires 29 January 2022                [Page 4]

Internet-Draft              TACACS+ Security                   July 2021


3.3.  Cipher Requirements

   XXX The IANA registry now has "Recommended" algorithms.  reference
   this for ciphers that should be supported.  As with TLS Protocol
   Versions (Section 3.2), TACACS+ implementations MUST adopt and
   deprecate new cipher suites as they emerge or fade and MAY support
   deprecated cipher suites.  However, cipher suites is a far more
   complex subject because those chosen directly affect the
   effectiveness of the confidentiality, integrity, and authentication
   of TLS, the processing required, and the types of authentication
   available.

   TACACS+ Servers supporting TLS MUST utilize the TLS encryption
   options described in the following sections.  XXX but should be
   allowed to evolve as TLS does.

3.3.1.  Mandatory Cipher Suites

   TLS 1.2 [RFC5246] allows specifying application profiles prescribing
   which cipher suites to implement for interoperability purposes.  To
   maintain simplicity of current TACACS+ configuration using pre-shared
   secrets, the server implementation MUST implement:

   1.  TLS-DHE-PSK-WITH-AES-128-GCM-SHA256

   2.  TLS_DHE_PSK_WITH_AES_128_CBC_SHA

   3.  TLS_DHE_PSK_WITH_AES_256_CBC_SHA

   A Client MUST implement at least one of the cipher suites which are
   implemented on the Server, and MAY implement all of them.

   Both Clients and Servers MAY implement other cipher suites, but their
   interoperability is not guaranteed and their implementation is
   outside of scope of this document.  XXX again; should allow a way to
   evolve.  how??? XXX russ housley says: Section 3.3.1: Do you want to
   provide any guidance for TLS 1.3?  I would say something like: if TLS
   1.2 is used, then one of the following ciphersuites MUST be used ...
   if TLS 1.3 is used, then one of the following ciphersuites MUST be
   used ...  This is not ideal for the evolution part, but you might
   say: if a version beyond TLS 1.3 is used, then one of the
   ciphersuites that i s marked as "Recommended" MUST be used ... XXX









Dahm, et al.             Expires 29 January 2022                [Page 5]

Internet-Draft              TACACS+ Security                   July 2021


3.4.  Authentication

   XXX TLS authentication can occur via asymmetric cryptography or
   Edwards-Curve Digital Signature Algorithm, or various forms of
   symmetric pre-shared-key (PSK). we only consider out of band PSK.
   KDF hash algorithm needs to be specified?  PSK can only be assoc with
   one HKDF in tls1.3 RPKs - https://tools.ietf.org/html/rfc7250

3.4.1.  PSK Identity Requirements

   See rfc 8446 s2.2 regarding PSK secret choice Because determining a
   correct PSK value on the server side is a computationally intensive
   operation requiring multiple round trips, a mechanism for hitless key
   change must be defined.  During TLS handshake, a client MUST use PSK
   identity as defined in [RFC4279] to signal to the server which PSK
   value to use.  If server does not recognize PSK identity it MUST
   respond with decrypt_error alert and MUST NOT respond with
   unknown_psk_identity.

   Process to change pre-shared keys on server and client is then:

   1.  Add new key with new PSK identity on the server.

   2.  Add new key with new PSK identity on the client.

   3.  Remove old key with old PSK identity from the client.

   4.  Remove old key with old PSK identity from the server.

   XXX reference "key life" in rfc8645 ???

   Note: PSK identity is transmitted in clear text and must not contain
   information which could aid an attacker who can eavesdrop on the
   connection.

3.4.2.  TLS Certificate Identity Requirements

   XXX

4.  Deprecation of TACACS+ PSK and Encryption

   The TACACS+ Protocol [RFC8907] specified a form of encryption and
   Peer authentication using a pre-shared key that is wholly inadequate
   by modern standards and is diminutively referred to as data
   obfuscation.  The introduction of TLS PSK and certificate Peer
   authentication and TLS encryption to TACACS+ obsolesces these former
   mechanisms and so are hereby deprecated.




Dahm, et al.             Expires 29 January 2022                [Page 6]

Internet-Draft              TACACS+ Security                   July 2021


   Along with them, the TAC_PLUS_UNENCRYPTED_FLAG flag in the TACACS+
   header, the least significant bit (LSB) of the flags field, is also
   deprecated.  Peers compliant with this document should set the
   TAC_PLUS_UNENCRYPTED_FLAG flag in the Packet Header of packets on TLS
   Connections, indicating that the data obfuscation is not used.  A
   Peer that receives a Packet without the flag set on a TLS Connection,
   should immediately log the error and terminate the TCP/IP connection.

   A Client that is compliant with this document MUST NOT utilize these
   deprecated authentication or encryption methods on TLS Connections/

   A TACACS+ Server or Client implementation SHOULD, and is strongly
   encouraged to, offer a configuration mechanism to disable non-TLS
   connections entirely.

   A future document SHOULD be written to deprecate the well-known TCP/
   IP port 49, allocated by the TACACS+ Protocol [RFC8907].

5.  TACACS+ Extended Authentication Packet Types

   Versions 1 and 2 of the TACACS+ Protocol, as defined in [RFC8907],
   specify the TACACS+ Authentication Packets for START, REPLY and
   CONTINUE which support the credential validation use case but does
   not accommodate any further arguments which may be used to give
   context to the request.

   One use-case where this shortcoming inhibits correct operation is for
   the TACACS+ proxy.  Because the originating client is not encoded in
   the regular Authentication START Packet, TACACS+ Servers generally
   attempt to determine the client from the TCP connection.  This is
   effective only for the first step: proxied TACACS+ servers can no
   longer securely enforce policy based upon the end client IP-Address.

   Further, advanced use cases (such as SSH key distribution) would
   otherwise rely on embedding structured information into the single
   data fields, obfuscating the content of the protocol.

   To support these use cases, and allow clients to add environment
   information to the request, the Extended Authentication Packets
   brings the Authentication phase of the protocol inline with the
   Authorization and Accounting Phase by incorporating extensible
   argument s.

   The server should expect Extended Authentication Packet Bodies if the
   minor version in the Packet Header is: 0x2

5.1.  The Extended Authentication START Packet Body




Dahm, et al.             Expires 29 January 2022                [Page 7]

Internet-Draft              TACACS+ Security                   July 2021


    1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
   +----------------+----------------+----------------+----------------+
   |    action      |    priv_lvl    |  authen_type   | authen_service |
   +----------------+----------------+----------------+----------------+
   |    user_len    |    port_len    |  rem_addr_len  |    data_len    |
   +----------------+----------------+----------------+----------------+
   |    arg_cnt                                                        |
   +----------------+----------------+----------------+----------------+
   |    arg_1_len                                                      |
   +----------------+----------------+----------------+----------------+
   |      ...                                                          |
   +----------------+----------------+----------------+----------------+
   |    arg_N_len                                                      |
   +----------------+----------------+----------------+----------------+
   |    user ...
   +----------------+----------------+----------------+----------------+
   |    port ...
   +----------------+----------------+----------------+----------------+
   |    rem_addr ...
   +----------------+----------------+----------------+----------------+
   |    data...
   +----------------+----------------+----------------+----------------+
   |    arg_1 ...
   +----------------+----------------+----------------+----------------+
   |    arg_2 ...
   +----------------+----------------+----------------+----------------+
   |    ...
   +----------------+----------------+----------------+----------------+
   |    arg_N ...
   +----------------+----------------+----------------+----------------+

                                  Figure 1

   The action, priv_level, authen_type, authen_service, user_len,
   port_len, rem_addr_len, data_len, user, port, rem_addr and data
   fields are used exactly as defined in the Authentication START Packet
   Body in [RFC8907].

   The new fields are as follows:

   arg_cnt

   This represents the number of arguments in the packet.

   arg_1_len ... arg_N_len, arg_1 ... arg_N






Dahm, et al.             Expires 29 January 2022                [Page 8]

Internet-Draft              TACACS+ Security                   July 2021


   Each argument is encoded in the packet as a single arg field (arg_1
   ... arg_N) with a corresponding length field that indicates the
   length of each argument in bytes.

   The arguments are argument-value pairs.  The argument and the value
   are in a single string and are separated by either a "=" (0X3D) or a
   "*" (0X2A).  The equals sign indicates a mandatory argument.  The
   asterisk indicates an optional one.  An argument name MUST NOT
   contain either of the separators.  An argument value MAY contain the
   separators.  The value part of an argument-value pair may be empty,
   that is, the length of the value may be zero.

   Optional arguments are ones that may be disregarded by the server.
   Mandatory arguments require that the server implementation and
   configuration includes the details of how to act on it.

   Though the arguments allow extensibility through the rule above, the
   argument to encode the originating client will be defined here:

   origin_client

   The IP-Address of the originating TACACS+ client.  This is text
   encoded in line with the rest of the TACACS+ protocol, and may be
   IPv4 or IPv6.  IPv4 addresses are specified as octet numeric values
   separated by dots ('.').  IPv6 address text representation is defined
   in [RFC5952].

5.2.  The Extension Authentication REPLY Packet Body

   The TACACS+ server sends only one type of extended authentication
   packet to the client.




















Dahm, et al.             Expires 29 January 2022                [Page 9]

Internet-Draft              TACACS+ Security                   July 2021


    1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
   +----------------+----------------+----------------+----------------+
   |     status     |      flags     |        server_msg_len           |
   +----------------+----------------+----------------+----------------+
   |           data_len              |        server_msg ...
   +----------------+----------------+----------------+----------------+
   |    arg_cnt                                                        |
   +----------------+----------------+----------------+----------------+
   |    arg_1_len                                                      |
   +----------------+----------------+----------------+----------------+
   |      ...                                                          |
   +----------------+----------------+----------------+----------------+
   |    arg_N_len                                                      |
   +----------------+----------------+----------------+----------------+
   |    data ...
   +----------------+----------------+----------------+----------------+
   |    arg_1 ...
   +----------------+----------------+----------------+----------------+
   |    arg_2 ...
   +----------------+----------------+----------------+----------------+
   |    ...
   +----------------+----------------+----------------+----------------+
   |    arg_N ...
   +----------------+----------------+----------------+----------------+

                                  Figure 2

   The status, flags, server_msg_len, data_len, server_msg, and data
   fields are used exactly as defined in the Authentication REPLY Packet
   Body in [RFC8907]].

   The new arg_cnt, arg_1 ... arg_N, and arg_1_len .... arg_N_len fields
   are used as defined in Common Authentication flows (Section 5.1).

5.3.  The Extended Authentication CONTINUE Packet Body

   This packet is sent from the client to the server following the
   receipt of an Extended REPLY packet.













Dahm, et al.             Expires 29 January 2022               [Page 10]

Internet-Draft              TACACS+ Security                   July 2021


    1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
   +----------------+----------------+----------------+----------------+
   |          user_msg len           |            data_len             |
   +----------------+----------------+----------------+----------------+
   |     flags                                                         |
   +----------------+----------------+----------------+----------------+
   |    arg_cnt                                                        |
   +----------------+----------------+----------------+----------------+
   |    arg_1_len                                                      |
   +----------------+----------------+----------------+----------------+
   |      ...                                                          |
   +----------------+----------------+----------------+----------------+
   |    arg_N_len                                                      |
   +----------------+----------------+----------------+----------------+
   |  user_msg ...
   +----------------+----------------+----------------+----------------+
   |    data ...
   +----------------+----------------+----------------+----------------+
   |    arg_1 ...
   +----------------+----------------+----------------+----------------+
   |    arg_2 ...
   +----------------+----------------+----------------+----------------+
   |    ...
   +----------------+----------------+----------------+----------------+
   |    arg_N ...
   +----------------+----------------+----------------+----------------+

                                  Figure 3

   The user_msg len, data_len, flags, user_msg, and data fields are used
   exactly as defined in the Authentication REPLY Packet Body in
   [RFC8907].

   The new arg_cnt, arg_1 ... arg_N, and arg_1_len .... arg_N_len fields
   are used as defined in Common Authentication flows (Section 5.1).

6.  Security Considerations

6.1.  TLS

   This document improves the confidentiality, integrity, and
   authentication of the connection and network traffic between the
   TACACS+ Peers by adding TLS support.  This does not in itself protect
   the server nor clients; the operator and equipment vendors have a
   role.  That role is to diligently follow current best practices for
   maintaining the integrity of network devices and selection of TLS key
   and encryption algorithms.




Dahm, et al.             Expires 29 January 2022               [Page 11]

Internet-Draft              TACACS+ Security                   July 2021


6.1.1.  TLS Options

   It is not and never will be reasonable to expect RFCs be updated in
   perpetuity as each new TLS version and/or algorithm emerges nor at a
   rate to keep pace.  It would be highly desirable for the TLS working
   group to publish a single document, that evolves with TLS and its
   algorithms, which RFCs using TLS, such as this one, could reference
   without the need to update those RFCs, thus allowing them to evolve
   by inheri tance.  As no such document exists, implementers and
   operators SHOULD make informed use of RFCs to determine which TLS
   versions and algorithms should be supported, deprecated, or
   abandoned, in the absence of updates to this RFC.

6.1.2.  TLS Use

   TLS encryption SHOULD be used in deployments when both the clients
   and servers support it.  Servers that support TLS encryption MAY be
   configured to allow Unsecure Connections when TLS encryption is not
   supported by the client, but this is NOT RECOMMENDED because of the
   threat of downgrade attacks, as described in Section 6.2.  Unsecure
   Connections would be better served by separate Servers from the TLS
   Servers.

   It is NOT RECOMMENDED to deploy TACACS+ without TLS authentication
   and encryption, except for test and debug environments.

6.2.  Well-Known TCP/IP Port

   A new port is considered appropriate and superior to a "STARTTLS"
   command because it allows:

   *  ease of blocking the unencrypted or inferiorly encrypted
      connections by the TCP/IP port number,

   *  passive Intrusion Detection Systems (IDSs) monitoring the
      unencrypted version to be unaffected by the introduction of TLS,

   *  avoidance of Man in the Middle (MitM) attacks that can interfere
      with STARTTLS,

   *  and helps prevent the accidental exposure of sensitive information
      due to misconfiguration.

   However, co-existence of inferior authentication and encryption,
   whether an Unsecure Connection or deprecated parts that compose TLS,
   also presents opportunity for down-grade attacks.  Causing failure of
   connections to the TLS-enabled service or the negotiation of shared
   algorithm support are two such down-grade attacks.  The simplest way



Dahm, et al.             Expires 29 January 2022               [Page 12]

Internet-Draft              TACACS+ Security                   July 2021


   to address the exposure from Unsecure Connection methods is to refuse
   Unsecure Connections at the server entirely, perhaps using separate
   servers for Unsecure Connections and TLS.  Another approach is mutual
   configuration that requires TLS.  Clients and servers SHOULD support
   configuration that requires Peers, globally and individually, use
   TLS.  Furthermore, Peers SHOULD be configurable to limit offered or
   recognized TLS versions and algorithms to those recommended by
   standards bodies and implementers.

   Servers and clients could also maintain a cache of Peers that have
   engaged in TACACS+ TLS connections and demand TLS from that point
   forward.  However, this has potential to be a Denial of Service (DoS)
   vector, whereby an attacker causes a sever to believe that a client
   that does not support TLS has successfully connected with TLS.

7.  IANA Considerations

   The authors request that, when this draft is accepted by the working
   group, the OPSAWG Chairs submit a request to IANA for an early
   allocation, per [RFC4020] and [RFC6335], of a new well-known system
   TCP/IP port number for "tacacss", described as "TACACS+ over TLS".
   The name "tacacss" follows the common practice of appending an "s" to
   the name given to the non-TLS well-known port.  This allocation is
   justified in Section 6.2.

   RFC EDITOR: this port number should replace "[TBD]" within this
   document.

8.  Acknowledgments

   The author(s) would like to thank Russ Housley, Steven M.  Bellovin,
   Stephen Farrell, Alan DeKok, and Tom Petch for their support,
   insightful review, and/or comments.

9.  Normative References

   [BCP14]    Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

              Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, May 2017.

              <https://www.rfc-editor.org/bcp/bcp14.txt>

   [RFC4279]  Eronen, P., Ed. and H. Tschofenig, Ed., "Pre-Shared Key
              Ciphersuites for Transport Layer Security (TLS)",
              RFC 4279, DOI 10.17487/RFC4279, December 2005,
              <https://www.rfc-editor.org/info/rfc4279>.



Dahm, et al.             Expires 29 January 2022               [Page 13]

Internet-Draft              TACACS+ Security                   July 2021


   [RFC4716]  Galbraith, J. and R. Thayer, "The Secure Shell (SSH)
              Public Key File Format", RFC 4716, DOI 10.17487/RFC4716,
              November 2006, <https://www.rfc-editor.org/info/rfc4716>.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008,
              <https://www.rfc-editor.org/info/rfc5246>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

   [RFC8907]  Dahm, T., Ota, A., Medway Gash, D.C., Carrel, D., and L.
              Grant, "The Terminal Access Controller Access-Control
              System Plus (TACACS+) Protocol", RFC 8907,
              DOI 10.17487/RFC8907, September 2020,
              <https://www.rfc-editor.org/info/rfc8907>.

10.  Informative References

   [RFC3365]  Schiller, J., "Strong Security Requirements for Internet
              Engineering Task Force Standard Protocols", BCP 61,
              RFC 3365, DOI 10.17487/RFC3365, August 2002,
              <https://www.rfc-editor.org/info/rfc3365>.

   [RFC4020]  Kompella, K. and A. Zinin, "Early IANA Allocation of
              Standards Track Code Points", RFC 4020,
              DOI 10.17487/RFC4020, February 2005,
              <https://www.rfc-editor.org/info/rfc4020>.

   [RFC6335]  Cotton, M., Eggert, L., Touch, J., Westerlund, M., and S.
              Cheshire, "Internet Assigned Numbers Authority (IANA)
              Procedures for the Management of the Service Name and
              Transport Protocol Port Number Registry", BCP 165,
              RFC 6335, DOI 10.17487/RFC6335, August 2011,
              <https://www.rfc-editor.org/info/rfc6335>.

   [RFC7605]  Touch, J., "Recommendations on Using Assigned Transport
              Port Numbers", BCP 165, RFC 7605, DOI 10.17487/RFC7605,
              August 2015, <https://www.rfc-editor.org/info/rfc7605>.

Authors' Addresses

   Thorsten Dahm

   Email: thorsten.dahm@gmail.com




Dahm, et al.             Expires 29 January 2022               [Page 14]

Internet-Draft              TACACS+ Security                   July 2021


   Douglas Gash
   Cisco Systems, Inc.

   Email: dcmgash@cisco.com


   Andrej Ota

   Email: andrej@ota.si










































Dahm, et al.             Expires 29 January 2022               [Page 15]
